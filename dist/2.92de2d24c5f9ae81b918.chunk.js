webpackJsonp([2],{1137:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),t.d(n,"GuideModule",function(){return x});var o=t(4),r=t(1),i=t(27),l=t(12),a=t(1270),c=t(67),s=t(342),p=t(1171),u=t(1172),g=t(1173),d=t(1174),h=t(1175),f=t(1176),m=t(1177),b=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},x=function(){function GuideModule(){}return GuideModule=b([Object(r.M)({declarations:[p.a,u.a,g.a,d.a,h.a,f.a,m.a],imports:[o.b,l.b,i.e,a.a,c.b,s.a],exports:[p.a],providers:[]})],GuideModule)}()},1171:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var o=t(1),r=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},i=function(){function ExGuideMainComponent(){}return ExGuideMainComponent=r([Object(o.o)({selector:"ex-guide-main",template:t(1271),styles:[t(1272)],encapsulation:o._19.None})],ExGuideMainComponent)}()},1172:function(e,n,t){"use strict";t.d(n,"a",function(){return l});var o=t(1),r=t(1273),i=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},l=function(){function ExInstallComponent(){this.code=r.a,this.page={previous:{name:""},next:{name:"快速开始",link:"/guide/start"}}}return ExInstallComponent=i([Object(o.o)({selector:"ex-install",template:t(1274),styles:[t(1275)]})],ExInstallComponent)}()},1173:function(e,n,t){"use strict";t.d(n,"a",function(){return l});var o=t(1),r=t(1276),i=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},l=function(){function ExStartComponent(){this.code=r.a,this.page={previous:{name:"安装",link:"/guide/install"},next:{name:"指令与服务",link:"/guide/directives"}}}return ExStartComponent=i([Object(o.o)({selector:"ex-start",template:t(1277),styles:[t(1278)]})],ExStartComponent)}()},1174:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var o=t(1),r=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},i=function(){function ExLanguageComponent(){this.page={previous:{name:"指令与服务",link:"/guide/directives"},next:{name:"自定义主题",link:"/guide/theme"}}}return ExLanguageComponent=r([Object(o.o)({selector:"ex-language",template:t(1279),styles:[t(1280)]})],ExLanguageComponent)}()},1175:function(e,n,t){"use strict";t.d(n,"a",function(){return l});var o=t(1),r=t(1281),i=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},l=function(){function ExThemeComponent(){this.code=r.a,this.page={previous:{name:"国际化",link:"/guide/i18n"},next:{name:"更新日志",link:"/guide/log"}}}return ExThemeComponent=i([Object(o.o)({selector:"ex-theme",template:t(1282)})],ExThemeComponent)}()},1176:function(e,n,t){"use strict";t.d(n,"a",function(){return c});var o=t(1),r=t(116),i=t(8),l=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},a=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},c=function(){function ExLogComponent(e,n){this.docsService=e,this.sanitizer=n,this.page={previous:{name:"自定义主题",link:"/guide/theme"},next:{name:"Layout 布局",link:"/basic/layout"}}}return ExLogComponent.prototype.genRepoHost=function(e){return+new Date(e)>15164928e5?"//github.com/ElemeFE":"//github.com/eleme"},ExLogComponent.prototype.makeSafeUrl=function(e){var n=e||"javascript:;";return this.sanitizer.bypassSecurityTrustUrl(n)},ExLogComponent.prototype.ngOnInit=function(){var e=this;this.docsService.getChangeLogs().subscribe(function(n){e.logs=n,e.logs.releases=e.logs.releases.reverse()})},ExLogComponent=l([Object(o.o)({selector:"ex-log",template:t(1283),styles:[t(1284)],encapsulation:o._19.None}),a("design:paramtypes",[r.a,i.c])],ExLogComponent)}()},1177:function(e,n,t){"use strict";t.d(n,"a",function(){return l});var o=t(1),r=t(1285),i=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},l=function(){function ExDirectivesComponent(){this.code=r.a,this.page={previous:{name:"快速上手",link:"/guide/start"},next:{name:"更新日志",link:"/guide/log"}}}return ExDirectivesComponent=i([Object(o.o)({selector:"ex-directives",template:t(1286),styles:[t(1287)]})],ExDirectivesComponent)}()},1270:function(e,n,t){"use strict";t.d(n,"a",function(){return h});var o=t(1),r=t(27),i=t(1171),l=t(1172),a=t(1173),c=t(1174),s=t(1175),p=t(1176),u=t(1177),g=this&&this.__decorate||function(e,n,t,o){var r,i=arguments.length,l=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(i<3?r(l):i>3?r(n,t,l):r(n,t))||l);return i>3&&l&&Object.defineProperty(n,t,l),l},d=[{path:"",component:i.a,children:[{path:"install",component:l.a},{path:"start",component:a.a},{path:"directives",component:u.a},{path:"i18n",component:c.a},{path:"theme",component:s.a},{path:"log",component:p.a}]}],h=function(){function GuideRoutingModule(){}return GuideRoutingModule=g([Object(o.M)({imports:[r.e.forChild(d)],exports:[r.e]})],GuideRoutingModule)}()},1271:function(e,n){e.exports="<router-outlet></router-outlet>\n"},1272:function(e,n){e.exports=""},1273:function(e,n,t){"use strict";n.a=["\n# npm i --save element-angular\n\n","\nimport { BrowserModule } from '@angular/platform-browser'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n// import module\nimport { ElModule } from 'element-angular'\n\n// if you use webpack, import style\nimport 'element-angular/theme/index.css'\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ElModule.forRoot(),\n    ...\n  ],\n    ...\n  bootstrap: [ExAppComponent],\n})\n\n// components\ntemplate: '<el-button>Hello World</el-button>'\n\n",'\n// in /src/styles.css\n// add code:\n\n/* You can add global styles to this file, and also import other style files */\n@import "~element-angular/theme/index.css";\n\n\n','\n// in /angular-cli.json\n// improve config :\n\n{\n  "app": [{\n    "styles": [\n      "../node_modules/element-angular/theme/index.css"\n    ],\n    // other configurations...\n  }]\n}\n\n']},1274:function(e,n){e.exports='<h2 i18n="@@install-h2-1">安装</h2>\n<h3 i18n="@@install-h3-1">npm 安装</h3>\n<p i18n="@@install-p-1">推荐使用 npm 的方式安装，它能更好地和 <a href="https://webpack.js.org/" target="_blank">webpack</a> 打包工具配合使用。</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[0] | highlightAuto"></code>\n</pre>\n\n<h3>Hello world</h3>\n<p i18n="@@install-p-2">引入模块后，我们能轻易地构建一个简易页面</p>\n\n<h4>Webpack</h4>\n<p i18n="@@install-p-4">使用 webpack 的引入方式：</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[1] | highlightAuto"></code>\n</pre>\n\n<h4>Angular CLI</h4>\n<p i18n="@@install-p-5">如果你使用 angular-cli，你需要样式文件在 <code>/src/styles</code> 引入：</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[2] | highlightAuto"></code>\n</pre>\n\n<p i18n="@@install-p-6">如果你自定义了一些样式编译方案，可能上述引入样式文件方式无法完成编译，请参考如下：</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[3] | highlightAuto"></code>\n</pre>\n\n<p i18n="@@install-p-7">如果你希望能够通过模块、异步模块、子模块来引入 element-angular，请参阅下一章</p>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n\n'},1275:function(e,n){e.exports=""},1276:function(e,n,t){"use strict";n.a=["\n# install cli\nnpm install -g @angular/cli\n\n# init project\nng new YOUR-PROJECT-NAME --style=scss\ncd YOUR-PROJECT-NAME\n\n# install element-angular\nnpm i --save element-angular\n\n# run\nng server\n\n","\nimport { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { RouterModule } from '@angular/router'\nimport { AppComponent } from './app.component'\n\nimport { ElModule } from 'element-angular'\n\n@NgModule({\n  declarations: [\n    ExAppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ElModule.forRoot(),\n  ],\n  providers: [],\n  bootstrap: [ExAppComponent],\n})\nexport class AppModule {\n}\n\n// 不同组件与指令使用请参考具体章节\n","\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { MenuComponent } from './menu/menu.component'\n\nimport { ElChildModules } from 'element-angular'\n\n@NgModule({\n  declarations: [\n    MenuComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ElChildModules.ElButton,          // just import button module\n  ],\n  exports: [ExGuideMainComponent],\n  providers: [],\n})\nexport class MenuModule {\n}\n\n"]},1277:function(e,n){e.exports='<h2 i18n="@@start-h2-1">快速上手</h2>\n<p i18n="@@start-p-1">本节将介绍如何在项目中使用 Element-angular。</p>\n<blockquote i18n="@@start-blockquote-1">对样式引入有疑问可以返回阅读上一章节。</blockquote>\n\n<h3 i18n="@@start-h3-1">创建项目</h3>\n<p i18n="@@start-p-2">如果你还没有一个 <code>Angular</code> 项目，可以考虑使用 cli 快速安装。</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[0] | highlightAuto"></code>\n</pre>\n\n<h3 i18n="@@start-h3-2">根模块引入</h3>\n<p i18n="@@start-p-3">将 <code>element-angular</code> 引入根模块后，可以在任意组件中使用。</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[1] | highlightAuto"></code>\n</pre>\n\n<h3 i18n="@@start-h3-3">引入单个组件</h3>\n<p i18n="@@start-p-4">附: 即便是引入整个库，Angular 在 Build 时也可以去除未使用的代码，\n  请参考 <a href="https://angular.cn/guide/aot-compiler#tree-shaking" target="_blank">Tree shaking</a></p>\n<pre>\n  <code class="hljs" [innerHTML]="code[2] | highlightAuto"></code>\n</pre>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n\n'},1278:function(e,n){e.exports=""},1279:function(e,n){e.exports='<h2 i18n="@@language-h2-1">国际化</h2>\n<p i18n="@@language-p-1">Element Angular 组件内部默认使用中文，若希望使用其他语言，则需要进行多语言设置。</p>\n<p>国际化仍在开发中，如果你对此有任何建议或想法，请前往 <a href="https://github.com/eleme/element-angular/issues" target="_blank">ISSUE</a></p>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n\n\n\n\n'},1280:function(e,n){e.exports=""},1281:function(e,n,t){"use strict";n.a=["\n# install cli\nnpm i element-theme -g\n\n","\n# init\net -i FILE_NAME\n","\n:root {\n\n  /* Colors\n  -------------------------- */\n  --color-primary: #20a0ff;\n  --color-success: #13ce66;\n  --color-warning: #f7ba2a;\n  --color-danger: #ff4949;\n  --color-info: #50BFFF;\n  --color-blue: #2e90fe;\n  --color-blue-light: #5da9ff;\n  --color-blue-lighter: rgba(var(--color-blue), 0.12);\n  --color-white: #fff;\n  --color-black: #000;\n  --color-grey: #C0CCDA;\n","\n# edit\n--color-primary: red;\n","\n# build\net\n> ✔ build theme font\n> ✔ build element theme\n","\nimport '../theme/index.css'\n"]},1282:function(e,n){e.exports='<h2 i18n="@@theme-h2-1">自定义主题</h2>\n<p i18n="@@theme-p-1">Element-Angular 默认提供一套主题，CSS 命名采用 BEM 的风格方便使用者覆盖样式。如果你想完全替换主题色或者部分样式，可以使用下面的方法。</p>\n\n<h2 i18n="@@theme-h2-2">仅替换主题色</h2>\n<p i18n="@@theme-p-2">如果仅希望更换 Element 的主题色，推荐使用<a href="https://elementui.github.io/theme-preview" target="_blank">在线主题生成工具</a>。</p>\n<p i18n="@@theme-p-3">Element-Angular 默认的主题色是鲜艳、友好的蓝色。通过替换主题色，能够让 Element-Angular 的视觉更加符合具体项目的定位。</p>\n<p i18n="@@theme-p-4">使用上述工具，可以很方便地实时预览主题色改变之后的视觉，同时它还可以基于新的主题色生成完整的样式文件包，供直接下载使用（关于如何使用下载的主题包，请参考本节「引入自定义主题」和「搭配插件按需引入组件主题」部分）。</p>\n<p i18n="@@theme-p-5">如果希望进行除主题色之外的样式定制，请继续阅读。</p>\n\n<h2 i18n="@@theme-h2-3">深层次的定制</h2>\n<p i18n="@@theme-p-6">如果仅仅改变主题色不能满足你的需求，请按以下步骤进行更深层次的主题定制：</p>\n\n<h3 i18n="@@theme-h3-1">安装工具</h3>\n<p i18n="@@theme-p-7">首先安装「主题生成工具」，可以全局安装或者安装在当前项目下，推荐安装在项目里，方便别人 clone 项目时能直接安装依赖并启动，这里以全局安装做演示。</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[0] | highlightAuto"></code>\n</pre>\n\n\n<h3 i18n="@@theme-h3-2">初始化变量文件</h3>\n<p i18n="@@theme-p-8">主题生成工具安装成功后，如果全局安装可以在命令行里通过 <code>et</code> 调用工具，如果安装在当前目录下，\n  需要通过 <code>node_modules/.bin/et</code> 访问到命令。执行 <code>-i</code> 初始化变量文件。\n  默认输出到 <code>element-variables.css</code>，当然你可以传参数指定文件输出目录。</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[1] | highlightAuto"></code>\n</pre>\n<p i18n="@@theme-p-9">如果使用默认配置，执行后当前目录会有一个 <code>element-variables.css</code> 文件。\n  内部包含了主题所用到的所有变量，它们使用 CSS4 的风格定义。大致结构如下</p>\n<pre>\n  <code class="hljs language-css" [innerHTML]="code[2] | highlightAuto"></code>\n</pre>\n\n<h3 i18n="@@theme-h3-3">修改变量</h3>\n<p i18n="@@theme-p-10">直接编辑 <code>element-variables.css</code> 文件，例如修改主题色为红色。</p>\n<pre>\n  <code class="hljs language-css" [innerHTML]="code[3] | highlightAuto"></code>\n</pre>\n\n<h3 i18n="@@theme-h3-4">编译主题</h3>\n<p i18n="@@theme-p-11">保存文件后，到命令行里执行 <code>et</code> 编译主题，如果你想启用 <code>watch</code> 模式，\n  实时编译主题，增加 <code>-w</code> 参数；\n  如果你在初始化时指定了自定义变量文件，则需要增加 <code>-c</code> 参数，并带上你的变量文件名</p>\n<pre>\n  <code class="hljs language-css" [innerHTML]="code[4] | highlightAuto"></code>\n</pre>\n\n<h3 i18n="@@theme-h3-5">引入自定义主题</h3>\n<p i18n="@@theme-p-12">默认情况下编译的主题目录是放在 <code>./theme</code> 下，你可以通过 <code>-o</code> 参数指定打包目录。\n  像引入默认主题一样，在代码里直接引用 <code>theme/index.css</code> 文件即可。</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[5] | highlightAuto"></code>\n</pre>\n\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n\n'},1283:function(e,n){e.exports='<div class="page-changelog" *ngIf="logs">\n  <div class="heading">\n    <el-button class="fr">\n      <a [href]="makeSafeUrl(logs[\'releases-link\'])" target="_blank">NPM Releases</a>\n    </el-button>\n    <span i18n="@@log-span-1">更新日志</span>\n  </div>\n  <ul class="timeline" ref="timeline">\n    <li *ngFor="let release of logs.releases">\n      <h3>\n        <a [href]="makeSafeUrl(release.link)" target="_blank">{{release.version}}</a>\n      </h3>\n      <p><em>{{release.date}}</em></p>\n      <ul>\n        <li *ngFor="let event of release.events">\n          {{event.description}}\n          <ng-container *ngIf="event.issues && event.issues.length > 0">\n            <a target="_blank" *ngFor="let issue of event.issues"\n              [href]="makeSafeUrl(genRepoHost(release.date) + \'/element-angular/issues/\' + issue)">\n              [issue-{{issue}}]\n            </a>\n          </ng-container>\n          <ng-container *ngIf="event[\'pull-requests\'] && event[\'pull-requests\'].length > 0">\n            <a target="_blank" *ngFor="let pr of event[\'pull-requests\']"\n               [href]="makeSafeUrl(genRepoHost(release.date) + \'/element-angular/pull/\' + pr)">\n              [pr-{{pr}}]\n            </a>\n          </ng-container>\n        </li>\n      </ul>\n    </li>\n  </ul>\n</div>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n\n'},1284:function(e,n){e.exports=".page-changelog {\n  padding-bottom: 100px; }\n  .page-changelog .fr {\n    float: right;\n    padding: 0; }\n    .page-changelog .fr a {\n      display: block;\n      padding: 10px 15px;\n      color: #475669; }\n    .page-changelog .fr:hover a {\n      color: #20a0ff; }\n  .page-changelog .heading {\n    margin-bottom: 40px; }\n  .page-changelog .timeline {\n    margin: 0 0 0 105px;\n    padding-left: 25px;\n    position: relative;\n    color: #5e6d82; }\n    .page-changelog .timeline:before {\n      content: '';\n      width: 1px;\n      height: 100%;\n      position: absolute;\n      left: 0;\n      top: 10px;\n      background-color: #eaeefa; }\n    .page-changelog .timeline > li {\n      list-style: none;\n      position: relative;\n      line-height: 1.8; }\n      .page-changelog .timeline > li:not(:last-child) {\n        margin-bottom: 50px; }\n      .page-changelog .timeline > li:first-child {\n        margin-top: -10px; }\n        .page-changelog .timeline > li:first-child h3:before {\n          left: -33px;\n          top: 10px;\n          width: 17px;\n          height: 17px;\n          background-color: #20a0ff;\n          border: 0; }\n    .page-changelog .timeline ul {\n      padding-left: 0; }\n      .page-changelog .timeline ul ul {\n        padding-left: 20px; }\n        .page-changelog .timeline ul ul li::before {\n          content: '';\n          circle: 4px #fff;\n          border: solid 1px #5e6d82;\n          margin-right: 5px;\n          display: inline-block;\n          vertical-align: middle; }\n    .page-changelog .timeline li li {\n      font-size: 14px;\n      list-style: none;\n      padding-left: 0;\n      word-break: break-all; }\n      .page-changelog .timeline li li:before {\n        content: '';\n        circle: 4px #5e6d82;\n        margin-right: 5px;\n        display: inline-block;\n        vertical-align: middle; }\n    .page-changelog .timeline h3 {\n      margin: 0 0 10px; }\n      .page-changelog .timeline h3:before {\n        content: \"\";\n        display: block;\n        position: absolute;\n        left: -31px;\n        top: 13px;\n        width: 13px;\n        height: 13px;\n        border-radius: 50%;\n        background-color: transparent;\n        border: 2px solid #20a0ff;\n        box-sizing: border-box;\n        background-color: #fff; }\n      .page-changelog .timeline h3 a {\n        opacity: 1;\n        float: none;\n        margin-left: 0;\n        color: inherit; }\n    .page-changelog .timeline h4 {\n      margin: 50px 0 10px; }\n    .page-changelog .timeline p {\n      margin: 0; }\n    .page-changelog .timeline em {\n      position: absolute;\n      left: -127px;\n      font-style: normal;\n      top: 6px;\n      font-size: 14px;\n      color: #99a9bf; }\n"},1285:function(e,n,t){"use strict";n.a=['\n<el-alert [el-class]="\'myClass\'">text</el-alert>\n\n// in Component style:\n<script type="text/scss">\n\n.myClass {\n  >div {\n    color: #ccc;\n  }\n}\n\n<\/script>\n']},1286:function(e,n){e.exports='<h2 i18n="@@directives-h2-1">指令与服务</h2>\n<p i18n="@@directives-p-1">Element Angular 内部携带了一些功能性的指令与服务，你可以直接使用它们。</p>\n\n<h3>[el-class]</h3>\n<p i18n="@@directives-p-2">[el-class] 可以在任何 Element Angular 组件上使用，它接受一个字符串参数，帮助你在组件上增加一个自定义的样式类。</p>\n<p>[el-class] 属性是作用与 ng-template 上，如下文在 el-alert 上使用的指令，不会将 class 直接插入在组件中，而是组件的父元素 Angular 创建的\n元素上，所以下文中使用了 <code> > div </code> 来选中子级元素。</p>\n<p i18n="@@directives-p-3">下面的示例就是如何使用 [el-class] 来为组件添加自己需要的 class 类名：</p>\n<pre>\n  <code class="hljs" [innerHTML]="code[0] | highlightAuto"></code>\n</pre>\n<blockquote i18n="@@directives-p-4">\n  需要注意的是，在你自己的组件内别忘了使用 <code>ViewEncapsulation.None</code> 来覆盖样式，如果缺少样式指定的打包方式，组件内部是无法覆盖继承的样式。\n</blockquote>\n\n<ex-footer-nav [page]="page"></ex-footer-nav>\n\n\n\n\n\n\n'},1287:function(e,n){e.exports=""}});